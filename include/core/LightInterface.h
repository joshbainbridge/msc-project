#ifndef _LIGHTINTERFACE_H_
#define _LIGHTINTERFACE_H_

#include <core/Common.h>
#include <core/RayCompressed.h>
#include <core/RandomGenerator.h>

MSC_NAMESPACE_BEGIN

/**
 * @brief      Abstract interface class for light sources
 * 
 * This is a simple interface for using a light in a polymorphic sense. As lights are sampled
 * randomly within the integrator to limit ray branching, the methods compute individual positions
 * to be shaded.
 */
class LightInterface
{
public:
  /**
   * @brief      Virtual destructor required for interface
   */
  virtual ~LightInterface() {}

  /**
   * @brief      Illumination of single position on a geometric surface
   *
   * @param      _random      thread local random generator to prevent mutation
   * @param      _position    position data
   * @param      _direction   input directions generated by light for surface evaluation
   * @param      _distance    distance between light sample and surface position
   * @param      _radiance    radiance value
   * @param      _direct_pdfw probability in respect to solid angle
   */
  virtual void illuminate(
    RandomGenerator* _random,
    const Vector3f& _position,
    Vector3f* _direction,
    float* _distance,
    Colour3f* _radiance,
    float* _direct_pdfw = NULL
    ) const =0;

  /**
   * @brief      Radiance on light in direction towards surface
   *
   * @param[in]  _direction    input direction to be evaluated
   * @param      _radiance     radiance value
   * @param      _cos_theta    cosine theta between direction and light normal
   * @param      _direct_pdfa  probability in respect to surface area
   */
  virtual void radiance(
    const Vector3f& _direction,
    Colour3f* _radiance,
    float* _cos_theta,
    float* _direct_pdfa = NULL
    ) const =0;
};

MSC_NAMESPACE_END

#endif
